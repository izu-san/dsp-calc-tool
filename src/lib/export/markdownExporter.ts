import type { ExportData } from '../../types/export';
import { formatRate, formatPower } from '../../utils/format';

/**
 * ExportDataをMarkdown形式の文字列に変換する
 * @param data ExportDataオブジェクト
 * @returns Markdown形式の文字列
 */
export function exportToMarkdown(data: ExportData): string {
  let markdown = `# ${data.planInfo.planName}\n\n`;

  markdown += `**Export Version:** ${data.version}\n`;
  markdown += `**Export Date:** ${new Date(data.exportDate).toLocaleString()}\n`;
  markdown += `**Recipe:** ${data.planInfo.recipeName} (SID: ${data.planInfo.recipeSID})\n`;
  markdown += `**Target Quantity:** ${data.planInfo.targetQuantity}/min\n\n`;

  markdown += `---\n\n`;

  markdown += `## Statistics\n\n`;
  markdown += `- Total Machines: ${data.statistics.totalMachines}\n`;
  markdown += `- Total Power Consumption: ${formatPower(data.statistics.totalPower)}\n`;
  markdown += `- Unique Raw Materials: ${data.statistics.rawMaterialCount}\n`;
  markdown += `- Unique Items: ${data.statistics.itemCount}\n\n`;

  markdown += `## Raw Materials\n\n`;
  if (data.rawMaterials.length > 0) {
    markdown += `| Item | Consumption Rate |\n`;
    markdown += `|---|---|\n`;
    data.rawMaterials.forEach(material => {
      markdown += `| ${material.itemName} | ${formatRate(material.consumptionRate)} |\n`;
    });
  } else {
    markdown += `No raw materials required.\n`;
  }
  markdown += `\n`;

  markdown += `## Products\n\n`;
  if (data.products.length > 0) {
    markdown += `| Item | Production Rate | Consumption Rate | Net Production |\n`;
    markdown += `|---|---|---|---|\n`;
    data.products.forEach(product => {
      markdown += `| ${product.itemName} | ${formatRate(product.productionRate)} | ${formatRate(product.consumptionRate)} | ${formatRate(product.netProduction)} |\n`;
    });
  } else {
    markdown += `No products generated.\n`;
  }
  markdown += `\n`;

  markdown += `## Machines\n\n`;
  if (data.machines.length > 0) {
    markdown += `| Machine | Count | Power/Machine | Total Power |\n`;
    markdown += `|---|---|---|---|\n`;
    data.machines.forEach(machine => {
      markdown += `| ${machine.machineName} | ${machine.count} | ${formatPower(machine.powerPerMachine)} | ${formatPower(machine.totalPower)} |\n`;
    });
  } else {
    markdown += `No machines used.\n`;
  }
  markdown += `\n`;

  markdown += `## Power Consumption\n\n`;
  markdown += `- Machines: ${formatPower(data.powerConsumption.machines)}\n`;
  markdown += `- Sorters: ${formatPower(data.powerConsumption.sorters)}\n`;
  markdown += `- Dyson Sphere: ${formatPower(data.powerConsumption.dysonSphere)}\n`;
  markdown += `- Total: ${formatPower(data.powerConsumption.total)}\n\n`;

  markdown += `## Conveyor Belts\n\n`;
  markdown += `- Total Belts: ${data.conveyorBelts.totalBelts}\n`;
  markdown += `- Max Saturation: ${data.conveyorBelts.maxSaturation.toFixed(2)}%\n`;
  if (data.conveyorBelts.bottleneckType) {
    markdown += `- Bottleneck Type: ${data.conveyorBelts.bottleneckType}\n`;
  }
  markdown += `\n`;

  markdown += `## Power Generation\n\n`;
  markdown += `- Total Required Power: ${formatPower(data.powerGeneration.totalRequiredPower)}\n`;
  markdown += `- Total Generated Power: ${formatPower(data.powerGeneration.totalGeneratedPower)}\n`;
  if (data.powerGeneration.generators && data.powerGeneration.generators.length > 0) {
    markdown += `### Generators\n\n`;
    markdown += `| Generator | Count | Power/Generator | Total Power | Fuel Consumption |\n`;
    markdown += `|---|---|---|---|---|\n`;
    data.powerGeneration.generators.forEach(generator => {
      const fuelConsumption = generator.fuel?.map(f => `${formatRate(f.consumptionRate)} ${f.itemName}`).join(', ') || 'N/A';
      markdown += `| ${generator.generatorName} | ${generator.count} | ${formatPower(generator.powerPerGenerator)} | ${formatPower(generator.totalPower)} | ${fuelConsumption} |\n`;
    });
  } else {
    markdown += `No power generators configured.\n`;
  }
  markdown += `\n`;

  markdown += `---\n\n`;
  markdown += `*Generated by Dyson Sphere Program Calculator Tool*\n`;

  return markdown;
}
