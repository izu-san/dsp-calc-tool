---
alwaysApply: true
---

# Dyson Sphere Program 生産チェーン計算機 - プロジェクトアーキテクチャ

## プロジェクト概要
このプロジェクトは Dyson Sphere Program の生産チェーンを計算・可視化する React ベースの Web アプリケーションです。

## 技術スタック
- **React 19** + **TypeScript** (Strict mode)
- **Vite 7** - ビルドツール
- **Tailwind CSS 4** - スタイリング
- **Zustand** - 状態管理 (localStorage 永続化)
- **Radix UI** - アクセシブルな UI コンポーネント
- **Vitest** - ユニットテスト
- **Playwright** - E2E テスト
- **decimal.js** - 高精度数値計算
- **i18next** - 多言語対応 (日本語・英語)

## ディレクトリ構造とファイルの役割

### [src/components/](mdc:src/components/)
React コンポーネント。各機能は専用のディレクトリに分割されています:
- `RecipeSelector/` - レシピ選択グリッド
- `ResultTree/` - 生産ツリー表示
- `SettingsPanel/` - 設定パネル
- `StatisticsView/` - 統計ビュー
- `BuildingCostView/` - 建設コスト表示
- `PowerGraphView/` - 電力グラフ
- `Layout/` - レイアウトコンポーネント（App.tsx のリファクタリング結果）

### [src/lib/](mdc:src/lib/)
ビジネスロジック層。UI から独立した純粋関数:
- [calculator.ts](mdc:src/lib/calculator.ts) - **コアロジック**: 生産チェーン計算エンジン
- [parser.ts](mdc:src/lib/parser.ts) - XML データパーサー
- [proliferator.ts](mdc:src/lib/proliferator.ts) - 増産剤計算
- [powerCalculation.ts](mdc:src/lib/powerCalculation.ts) - 電力計算
- [buildingCost.ts](mdc:src/lib/buildingCost.ts) - 建設コスト計算
- [miningCalculation.ts](mdc:src/lib/miningCalculation.ts) - 採掘速度計算
- [statistics.ts](mdc:src/lib/statistics.ts) - 統計計算

### [src/stores/](mdc:src/stores/)
Zustand 状態管理ストア:
- [gameDataStore.ts](mdc:src/stores/gameDataStore.ts) - ゲームデータ (Items, Recipes, Machines)
- [settingsStore.ts](mdc:src/stores/settingsStore.ts) - ユーザー設定 (localStorage 永続化)
- [recipeSelectionStore.ts](mdc:src/stores/recipeSelectionStore.ts) - レシピ選択状態
- [nodeOverrideStore.ts](mdc:src/stores/nodeOverrideStore.ts) - ノード別オーバーライド設定
- [favoritesStore.ts](mdc:src/stores/favoritesStore.ts) - お気に入りレシピ

### [src/types/](mdc:src/types/)
TypeScript 型定義:
- [game-data.ts](mdc:src/types/game-data.ts) - ゲームデータ型
- [settings.ts](mdc:src/types/settings.ts) - 設定型
- [calculation.ts](mdc:src/types/calculation.ts) - 計算結果型
- [saved-plan.ts](mdc:src/types/saved-plan.ts) - プラン保存型

### [src/utils/](mdc:src/utils/)
ユーティリティ関数:
- [format.ts](mdc:src/utils/format.ts) - 数値フォーマット
- [planExport.ts](mdc:src/utils/planExport.ts) - プラン保存・復元
- [urlShare.ts](mdc:src/utils/urlShare.ts) - URL 共有機能

### [src/constants/](mdc:src/constants/)
定数定義:
- [machines.ts](mdc:src/constants/machines.ts) - 施設データ
- [rawMaterials.ts](mdc:src/constants/rawMaterials.ts) - 原材料定義

## コーディング規約

### TypeScript
- **Strict mode** を使用 ([tsconfig.app.json](mdc:tsconfig.app.json))
- `@typescript-eslint/no-explicit-any` は `error` (テストファイルを除く)
- 全ての型は明示的に定義
- `noUnusedLocals` と `noUnusedParameters` を有効化

### React
- 関数コンポーネントのみ使用
- React 19 の最新機能を活用
- `lazy()` でコード分割 (WelcomeModal, ModSettings など)
- カスタムフックは `src/hooks/` に配置

### 状態管理
- Zustand を使用
- 永続化が必要な設定は `persist` ミドルウェアを使用
- ストアは単一責任の原則に従う

### スタイリング
- Tailwind CSS 4 を使用
- ダークモードを永続的に有効化
- カスタムカラー: `dark-*`, `space-*`, `neon-*` ([tailwind.config.js](mdc:tailwind.config.js) 参照)

### テスト
- ユニットテスト: Vitest + Testing Library
- E2E テスト: Playwright
- テストファイルは `__tests__/` ディレクトリに配置
- 100% カバレッジを目標 (特に計算ロジック)

## 重要な設計パターン

### 計算の流れ
1. ユーザーがレシピを選択 → `recipeSelectionStore`
2. 設定を適用 → `settingsStore`, `nodeOverrideStore`
3. 計算実行 → [calculator.ts](mdc:src/lib/calculator.ts) の `calculateRecipeTree()`
4. 結果を表示 → `ResultTree`, `StatisticsView` など

### データフロー
```
XML (public/data/) 
  → parser.ts (XMLパース) 
  → gameDataStore (Map 構造で保持)
  → calculator.ts (計算)
  → UI コンポーネント (表示)
```

### パフォーマンス最適化
- React.lazy() でコード分割
- Vite の manualChunks で依存関係を分割
- useMemo/useCallback で再計算を最小化
- Decimal.js で高精度計算

## 新機能追加の手順
1. `src/types/` に型定義を追加
2. `src/lib/` にビジネスロジックを実装
3. `src/components/` に UI コンポーネントを作成
4. 必要に応じて `src/stores/` を更新
5. テストを `__tests__/` に追加
6. [README.md](mdc:README.md) を更新

## リファクタリング方針
- 大きなコンポーネントは Layout コンポーネントに分割 ([App.tsx](mdc:src/App.tsx) 参照)
- 共通ロジックはカスタムフックに抽出
- Pure な計算ロジックは lib に配置
