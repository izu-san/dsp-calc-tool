---
alwaysApply: true
---

# リファクタリング

## 重要

リファクタリングを依頼された場合、このルールを必ず守って作業を実施すること。

このファイルを参照したとき、「リファクタリングルールを遵守します。」と報告すること。


### リファクタリング実施時の必須チェックリスト

各リファクタリング作業の実施時には、以下の品質保証手順を**必ず実行**してください。

各ステップを勝手にスキップすることは禁止します。

#### 実施手順

##### ステップ 1: コード変更前の準備
- [ ] 現在のブランチを確認（`git branch`）
- [ ] 最新のdevelopブランチにマージ済みか確認
- [ ] リファクタリング用のfeatureブランチを作成

  ```bash
  git checkout -b feature/refactoring-<機能名>
  ```

##### ステップ 2: 既存テストの実行（変更前）
- [ ] **単体テストを実行**し、全テスト合格を確認

  ```bash
  npm test
  ```

  - **合格基準**: 全テスト成功（0 failed）
  - **失敗時の対応**: 既存バグの可能性があるため、リファクタリング前に修正

- [ ] **E2Eテストを実行**し、全テスト合格を確認

  ```bash
  npm run test:e2e
  ```

  - **合格基準**: 全21シナリオ成功
  - **失敗時の対応**: UIレベルの問題を修正してからリファクタリング開始

##### ステップ 3: リファクタリングの実施
- [ ] 計画に沿ったコード変更を実施
- [ ] TypeScriptのコンパイルエラーがないことを確認

  ```bash
  npx tsc --noEmit
  ```

##### ステップ 4: ビルド確認
- [ ] **プロダクションビルドが成功**することを確認

  ```bash
  npm run build
  ```

  - **合格基準**: エラーなしでビルド完了
  - **出力確認**: `dist/` ディレクトリが正常に生成されている
  - **失敗時の対応**: ビルドエラーを解消してから次のステップへ

##### ステップ 5: 単体テストの再実行（変更後）
- [ ] **単体テストを再実行**し、全テスト合格を確認

  ```bash
  npm test
  ```

  - **合格基準**: 全テスト成功（リファクタリング前と同じ結果）
  - **カバレッジ確認**: カバレッジが低下していないか確認

    ```bash
    npm run test:coverage
    ```

  - **失敗時の対応**: リグレッションが発生している可能性があるため、コードを見直し

##### ステップ 6: 単体テストを追加
- [ ] リファクタリング内容に応じて単体テストを追加する
  - テストファイル: `src/**/__tests__/*.test.ts(x)`
  - カバレッジ目標: 新規コードは85%以上
  
- [ ] 追加したテストが合格することを確認

  ```bash
  npm test -- <新規テストファイル名>
  ```

##### ステップ 7: E2Eテストの再実行（変更後）
- [ ] **E2Eテストを再実行**し、全テスト合格を確認
  - ローカル環境でアプリケーションが起動していない場合、E2Eテストの実行前にアプリケーションを起動すること

  ```bash
  npm run dev
  ```

  ```bash
  npm run test:e2e
  ```

  - **合格基準**: 全21シナリオ成功
  - **実行時間**: 約13秒程度（16並列ワーカー）
  - **失敗時の対応**: UIまたはユーザーフローに影響が出ている可能性があるため、修正

##### ステップ 8: 最終確認
- [ ] ESLintでコード品質を確認

  ```bash
  npm run lint
  ```

  - **合格基準**: エラー0件、警告0件（または許容範囲内）

- [ ] ローカル環境でアプリケーションを起動し、動作確認

  ```bash
  npm run dev
  ```

  - **確認項目**:
    - アプリケーションが正常に起動する
    - 主要な機能（レシピ選択、計算、保存/読込）が動作する
    - コンソールにエラーが出ていない

##### ステップ 9: コミットとプッシュ
- [ ] 変更をコミット

  ```bash
  git add .
  git commit -m "refactor: <変更内容の簡潔な説明>"
  ```
  
- [ ] リモートリポジトリにプッシュ

  ```bash
  git push origin feature/refactoring-<機能名>
  ```

##### ステップ 10: プルリクエストの作成
@create-pull-request.mdc の手順を参照すること

---

### 品質保証の成功基準

リファクタリングが成功したと判断する基準:

| 項目 | 成功基準 | 確認方法 |
|------|---------|---------|
| **単体テスト** | 全テスト合格（0 failed） | `npm test` |
| **E2Eテスト** | 全21シナリオ合格 | `npm run test:e2e` |
| **ビルド** | エラーなしで完了 | `npm run build` |
| **コード品質** | ESLintエラー0件 | `npm run lint` |
| **カバレッジ** | リファクタリング前と同等以上 | `npm run test:coverage` |
| **TypeScript** | コンパイルエラー0件 | `npx tsc --noEmit` |
| **動作確認** | 主要機能が正常動作 | 手動テスト |

---

### 重要な注意事項

1. **テストを先に実行する**: コード変更前に既存テストを実行し、ベースラインを確立してください。

2. **段階的なリファクタリング**: 大規模な変更は複数のPRに分割し、各ステップで品質保証を実施してください。

3. **テストの追加**: 新しいロジックや複雑な変更には、必ず対応する単体テストを追加してください。

4. **E2Eテストの重要性**: 単体テストだけでなく、E2Eテストも必ず実行してください。UIレベルのリグレッションを検出できます。

5. **ビルド確認**: プロダクションビルドが成功することを確認してください。開発環境だけで動作しても本番環境で問題が起きる可能性があります。

6. **カバレッジの維持**: リファクタリングによってテストカバレッジが低下しないよう注意してください。

---

### ワークフロー例

```bash
# 1. ブランチ作成
git checkout develop
git pull origin develop
git checkout -b feature/refactoring-app-component

# 2. 変更前のテスト実行
npm test                    # 単体テスト
npm run test:e2e           # E2Eテスト
npm run build              # ビルド確認

# 3. リファクタリング実施
# ... コード変更 ...

# 4. TypeScriptコンパイル確認
npx tsc --noEmit

# 5. 変更後のテスト実行
npm test                    # 単体テスト（再実行）
npm run test:coverage      # カバレッジ確認
npm run test:e2e           # E2Eテスト（再実行）

# 6. ビルド確認
npm run build

# 7. コード品質チェック
npm run lint

# 8. 動作確認
npm run dev

# 9. コミット＆プッシュ
git add .
git commit -m "refactor: App.tsxを分割してカスタムフックを抽出"
git push origin feature/refactoring-app-component

# 10. GitHubでPR作成
```

---

この品質保証手順を遵守することで、リファクタリング後も安定した品質を維持できます。

---

