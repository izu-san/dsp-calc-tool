---
globs: *.ts,*.tsx
---

# TypeScript コーディングパターン

## 型定義の原則

### 明示的な型定義
```typescript
// Good: 明示的な戻り値の型
function calculateProductionRate(
  recipe: Recipe,
  machine: Machine,
  proliferator: ProliferatorConfig,
  proliferatorMultiplier: { production: number; speed: number }
): number {
  // ...
}

// Bad: 戻り値の型が推論に依存
function calculateProductionRate(recipe, machine, proliferator, proliferatorMultiplier) {
  // ...
}
```

### any の禁止
ESLint ルール `@typescript-eslint/no-explicit-any: error` が適用されています。
- テストファイル以外で `any` を使用しないこと
- 不明な型は `unknown` を使用し、適切に型ガードを実装

### Map と Set の型定義
```typescript
// Good: ゲームデータは Map で管理
interface GameData {
  items: Map<number, Item>;
  recipes: Map<number, Recipe>;
  machines: Map<number, Machine>;
}

// Good: alternativeRecipes の型定義
alternativeRecipes: Map<number, number>; // itemId -> recipeId
```

### Decimal.js の使用
高精度計算には `decimal.js` を使用:
```typescript
import Decimal from 'decimal.js';

// Good: 浮動小数点誤差を回避
const totalPower = totalFacilityPower.plus(totalSorterPower);

// Bad: JavaScript の number (精度問題あり)
const totalPower = totalFacilityPower + totalSorterPower;
```

## インポート順序
1. 外部ライブラリ (react, decimal.js, etc.)
2. 内部型定義 (types)
3. 内部モジュール (lib, stores, utils)
4. 相対パス (./)

```typescript
import { useEffect, lazy, Suspense } from 'react';
import { useTranslation } from 'react-i18next';
import { useGameDataStore } from './stores/gameDataStore';
import type { Recipe, Machine } from '../types';
import { calculateProductionRate } from './calculator';
```

## コンポーネントの Props 型定義

### Interface を使用
```typescript
interface RecipeSelectorProps {
  recipes: Recipe[];
  selectedRecipeId?: number;
  onRecipeSelect: (recipe: Recipe) => void;
}

export function RecipeSelector({ 
  recipes, 
  selectedRecipeId, 
  onRecipeSelect 
}: RecipeSelectorProps) {
  // ...
}
```

### Optional Props
```typescript
interface NodeSettingsModalProps {
  node: RecipeTreeNode | null;  // null 許容
  isOpen: boolean;
  onClose: () => void;
  onSave?: (overrides: NodeOverrideSettings) => void;  // Optional
}
```

## Zustand ストアの型定義パターン

```typescript
interface SettingsStore {
  // State
  settings: GlobalSettings;
  
  // Actions
  setProliferator: (type: keyof typeof PROLIFERATOR_DATA, mode: 'production' | 'speed') => void;
  setMachineRank: (recipeType: keyof MachineRankSettings, rank: string) => void;
  updateSettings: (settings: Partial<GlobalSettings>) => void;
  resetSettings: () => void;
}

export const useSettingsStore = create<SettingsStore>()(
  persist(
    (set) => ({
      settings: defaultSettings,
      // ...
    }),
    { name: 'dsp-calculator-settings' }
  )
);
```

## エラーハンドリング

### Error Boundary の使用
コンポーネントは [ErrorBoundary.tsx](mdc:src/components/ErrorBoundary.tsx) でラップ:
```typescript
<ErrorBoundary>
  <YourComponent />
</ErrorBoundary>
```

### 型安全な null チェック
```typescript
// Good: Optional chaining と nullish coalescing
const itemName = data.items.get(itemId)?.Name ?? 'Unknown';

// Bad: 手動での null チェック
const item = data.items.get(itemId);
const itemName = item ? item.Name : 'Unknown';
```

## 定数の型定義

```typescript
// Good: as const で厳密な型
export const PROLIFERATOR_DATA = {
  none: { type: 'none', productionBonus: 0, speedBonus: 0, powerIncrease: 0 },
  mk1: { type: 'mk1', productionBonus: 0.125, speedBonus: 0.25, powerIncrease: 0.3 },
  // ...
} as const;

// Good: keyof typeof で型安全なキー
type ProliferatorType = keyof typeof PROLIFERATOR_DATA;
```

## テストファイルでの型の扱い

テストファイル (`__tests__/**`, `*.test.ts`, `*.spec.ts`) では:
- `any` の使用が許可されています (ESLint で off)
- ただし、できる限り型定義を使用することを推奨
- モックデータのファクトリ関数を [test/factories/](mdc:src/test/factories/) に配置
