---
alwaysApply: true
---

# リファクタリング

## 重要
リファクタリングを実施する際は `リファクタリング実施時の必須チェックリスト` を必ず遵守して、各ステップを実施すること。

## リファクタリング依頼時の自動実行ルール

ユーザーからリファクタリングを依頼された場合、以下の**全ステップを必ず自動的に実行**すること：

### 必須実行ステップ
1. ✅ **ステップ 1**: ブランチの確認と作成
   - 現在のブランチを確認
   - リファクタリング対象から機能名を決定
   - `feature/refactoring-<機能名>` ブランチを作成

2. ✅ **ステップ 2**: 既存テストの実行（変更前）
   - 単体テスト (`npm test`) を実行してベースラインを確立
   - E2Eテスト: devサーバーをバックグラウンドで起動して実行
   - テスト結果を記録（終了コードと出力から解析、PR本文生成に使用）

3. ✅ **ステップ 3-6**: リファクタリング実施とテスト
   - コード変更、ビルド確認、単体テスト再実行、必要に応じてテスト追加

4. ✅ **ステップ 7**: E2Eテストの再実行（変更後）
   - 時間がかかるが**必ず実行**すること
   - UIレベルのリグレッションを検出

5. ✅ **ステップ 8**: 最終確認
   - ESLint、TypeScriptコンパイル確認

6. ✅ **ステップ 9-11**: コミット、プッシュ、PR作成
   - 変更内容を確認してコミット
   - リモートリポジトリにプッシュ
   - プルリクエストを作成

### Git操作の安全性ガイドライン
- ✅ コミット前に必ず `git status` と `git diff` で変更内容を確認
- ✅ 意図しないファイル（デバッグコード、一時ファイル等）が含まれていないか確認
- ✅ コミットメッセージは変更内容を正確に反映（例: `refactor: App.tsxを分割してカスタムフックを抽出`）
- ✅ ユーザーに各ステップの実行結果を報告すること

---

### リファクタリング実施時の必須チェックリスト

各リファクタリング作業の実施時には、以下の品質保証手順を**必ず実行**してください。

各ステップを勝手にスキップすることは禁止します。

#### 実施手順

##### ステップ 1: コード変更前の準備 🔴 必須実行
- [ ] 現在のブランチを確認（必ず実行すること）

  ```bash
  git branch
  ```

- [ ] 最新のdevelopブランチに同期済みか確認（必ず実行すること）

  ```bash
  git checkout develop
  git pull origin develop
  ```

- [ ] リファクタリング用のfeatureブランチを作成（必ず実行すること）

  **ブランチ名の決定方法**:
  1. リファクタリング対象のファイル名から抽出
     - 例: `App.tsx` → `feature/refactoring-app`
  2. 変更内容の概要から生成
     - 例: 「カスタムフック抽出」 → `feature/refactoring-custom-hooks`

  ```bash
  git checkout -b feature/refactoring-<機能名>
  ```

##### ステップ 2: 既存テストの実行（変更前） 🔴 必須実行
- [ ] **単体テストを実行**し、全テスト合格を確認（必ず実行すること）

  ```bash
  npm test
  ```

  - **合格基準**: 全テスト成功（0 failed）
  - **失敗時の対応**: 既存バグの可能性があるため、リファクタリング前に修正

- [ ] **E2Eテストを実行**し、全テスト合格を確認（必ず実行すること）

  **Windows (PowerShell)**:
  ```powershell
  # devサーバーをバックグラウンドで起動
  $devServer = Start-Process pwsh -ArgumentList "-Command", "npm run dev" -PassThru
  # 数秒待機してサーバー起動を確認
  Start-Sleep -Seconds 3
  # E2Eテスト実行
  npm run test:e2e
  # テスト後、devサーバーを停止
  Stop-Process -Id $devServer.Id
  ```

  **Unix/Mac (Bash)**:
  ```bash
  # devサーバーをバックグラウンドで起動
  npm run dev &
  DEV_PID=$!
  # 数秒待機してサーバー起動を確認
  sleep 3
  # E2Eテスト実行
  npm run test:e2e
  # テスト後、devサーバーを停止
  kill $DEV_PID
  ```

  - **合格基準**: 全21シナリオ成功
  - **失敗時の対応**: UIレベルの問題を修正してからリファクタリング開始

##### ステップ 3: リファクタリングの実施
- [ ] 計画に沿ったコード変更を実施
- [ ] TypeScriptのコンパイルエラーがないことを確認

  ```bash
  npx tsc --noEmit
  ```

##### ステップ 4: ビルド確認
- [ ] **プロダクションビルドが成功**することを確認

  ```bash
  npm run build
  ```

  - **合格基準**: エラーなしでビルド完了
  - **出力確認**: `dist/` ディレクトリが正常に生成されている
  - **失敗時の対応**: ビルドエラーを解消してから次のステップへ

##### ステップ 5: 単体テストの再実行（変更後）
- [ ] **単体テストを再実行**し、全テスト合格を確認

  ```bash
  npm test
  ```

  - **合格基準**: 全テスト成功（リファクタリング前と同じ結果）
  - **カバレッジ確認**: カバレッジが低下していないか確認

    ```bash
    npm run test:coverage
    ```

  - **失敗時の対応**: リグレッションが発生している可能性があるため、コードを見直し

##### ステップ 6: 単体テストの追加（必要に応じて）
- [ ] リファクタリング内容に応じて単体テストを追加する
  - **新しい関数・モジュールを抽出した場合**: 対応するテストを追加
  - **既存コードの構造のみを変更した場合**: テスト追加は不要（既存テストで十分）
  - テストファイル: `src/**/__tests__/*.test.ts(x)`
  - カバレッジ目標: 新規コードは85%以上
  
- [ ] 追加したテストが合格することを確認

  ```bash
  npm test -- <新規テストファイル名>
  ```

##### ステップ 7: E2Eテストの再実行（変更後） 🔴 必須実行
- [ ] **E2Eテストを再実行**し、全テスト合格を確認（必ず実行すること）

  **実行方法**:
  
  **Windows (PowerShell)**:
  ```powershell
  # devサーバーをバックグラウンドで起動
  $devServer = Start-Process pwsh -ArgumentList "-Command", "npm run dev" -PassThru
  # 数秒待機してサーバー起動を確認
  Start-Sleep -Seconds 3
  # E2Eテスト実行
  npm run test:e2e
  # テスト後、devサーバーを停止
  Stop-Process -Id $devServer.Id
  ```

  **Unix/Mac (Bash)**:
  ```bash
  # devサーバーをバックグラウンドで起動
  npm run dev &
  DEV_PID=$!
  # 数秒待機してサーバー起動を確認
  sleep 3
  # E2Eテスト実行
  npm run test:e2e
  # テスト後、devサーバーを停止
  kill $DEV_PID
  ```

  - **合格基準**: 全21シナリオ成功
  - **実行時間**: 約13秒程度（16並列ワーカー）
  - **失敗時の対応**: UIまたはユーザーフローに影響が出ている可能性があるため、修正

##### ステップ 8: 最終確認
- [ ] ESLintでコード品質を確認

  ```bash
  npm run lint
  ```

  - **合格基準**: エラー0件、警告0件（または許容範囲内）

- [ ] ローカル環境でアプリケーションを起動し、動作確認

  ```bash
  npm run dev
  ```

  - **確認項目**:
    - アプリケーションが正常に起動する
    - 主要な機能（レシピ選択、計算、保存/読込）が動作する
    - コンソールにエラーが出ていない

##### ステップ 9: コミット前の最終確認 🔴 必須実行
- [ ] 変更内容を確認（必ず実行すること）

  ```bash
  git status
  git diff
  ```

- [ ] 不要なファイル（一時ファイル、デバッグコードなど）が含まれていないことを確認
- [ ] コミットメッセージが適切であることを確認

##### ステップ 10: コミットとプッシュ 🔴 必須実行
- [ ] 変更をステージングしてコミット（必ず実行すること）

  **コミットメッセージの生成方法**:
  1. 変更されたファイルリストから主要な変更を特定
  2. 以下の形式でメッセージを生成:
     - リファクタリング: `refactor: <主要ファイル>を<変更内容>`
     - 例: `refactor: App.tsxを分割してカスタムフックを抽出`
  
  ```bash
  # 変更内容を再確認
  git status
  # 変更をステージング（慎重に）
  git add <変更したファイル>
  # または全変更をステージング（.cursor/rules/ の変更は除く）
  git add src/ tests/ package.json
  # コミット（自動生成したメッセージを使用）
  git commit -m "refactor: <自動生成したメッセージ>"
  ```
  
- [ ] リモートリポジトリにプッシュ

  ```bash
  git push origin feature/refactoring-<機能名>
  ```

##### ステップ 11: プルリクエストの作成 🔴 必須実行
- [ ] プルリクエストを作成（必ず実行すること）
- [ ] @create-pull-request.mdc の**全ステップを自動実行**すること
  - ステップ 1: 前提条件の確認（ブランチ、コミット、プッシュ状態）
  - ステップ 2: マージ先ブランチとの差分確認
  - ステップ 3: PRタイトル自動生成（Conventional Commits形式）
  - ステップ 4: PR本文自動生成（目的、変更内容、品質保証結果を含む）
  - ステップ 5: `gh pr create` コマンドで実際にPRを作成

---

### 品質保証の成功基準

リファクタリングが成功したと判断する基準:

| 項目 | 成功基準 | 確認方法 |
|------|---------|---------|
| **単体テスト** | 全テスト合格（0 failed） | `npm test` |
| **E2Eテスト** | 全21シナリオ合格 | `npm run test:e2e` |
| **ビルド** | エラーなしで完了 | `npm run build` |
| **コード品質** | ESLintエラー0件 | `npm run lint` |
| **カバレッジ** | リファクタリング前と同等以上 | `npm run test:coverage` |
| **TypeScript** | コンパイルエラー0件 | `npx tsc --noEmit` |
| **動作確認** | 主要機能が正常動作 | 手動テスト |

---

### 重要な注意事項

1. **テストを先に実行する**: コード変更前に既存テストを実行し、ベースラインを確立してください。

2. **段階的なリファクタリング**: 大規模な変更は複数のPRに分割し、各ステップで品質保証を実施してください。

3. **テストの追加**: 新しいロジックや複雑な変更には、必ず対応する単体テストを追加してください。

4. **E2Eテストの重要性**: 単体テストだけでなく、E2Eテストも必ず実行してください。UIレベルのリグレッションを検出できます。

5. **ビルド確認**: プロダクションビルドが成功することを確認してください。開発環境だけで動作しても本番環境で問題が起きる可能性があります。

6. **カバレッジの維持**: リファクタリングによってテストカバレッジが低下しないよう注意してください。

---

### トラブルシューティング

#### テストが失敗した場合
1. **変更内容を再確認**し、問題箇所を特定
2. **差分を確認**して意図しない変更がないか確認

   ```bash
   git diff
   ```

3. **段階的にロールバック**して原因を特定

   ```bash
   # 変更を一時退避
   git stash
   # 特定のファイルのみ復元して確認
   git checkout HEAD -- <ファイル名>
   ```

4. **修正が難しい場合**は、より小さい単位でリファクタリングを実施

#### ビルドが失敗した場合
1. TypeScriptのコンパイルエラーを確認

   ```bash
   npx tsc --noEmit
   ```

2. 依存関係の問題を確認

   ```bash
   npm ci
   ```

3. キャッシュをクリア

   ```bash
   rm -rf node_modules dist
   npm install
   npm run build
   ```

#### E2Eテストが失敗した場合
1. **UIモード**でテストを実行して視覚的に確認

   ```bash
   npm run test:e2e -- --ui
   ```

2. **特定のテストのみ**を実行して問題を絞り込み

   ```bash
   npm run test:e2e -- tests/e2e/basic-flow.spec.ts
   ```

3. **スクリーンショット**を確認（`test-results/` ディレクトリ）

---

### ワークフロー例

```bash
# ステップ 1: ブランチ作成
git checkout develop
git pull origin develop
git checkout -b feature/refactoring-app-component

# ステップ 2: 変更前のテスト実行
npm test                    # 単体テスト
# E2Eテスト（devサーバーをバックグラウンドで起動）
$devServer = Start-Process pwsh -ArgumentList "-Command", "npm run dev" -PassThru  # Windows
# npm run dev & ; DEV_PID=$!  # Unix/Mac
Start-Sleep -Seconds 3  # Windows
# sleep 3  # Unix/Mac
npm run test:e2e
Stop-Process -Id $devServer.Id  # Windows
# kill $DEV_PID  # Unix/Mac

# ステップ 3: リファクタリング実施
# ... コード変更 ...

# ステップ 4: ビルド確認
npm run build

# ステップ 5: 単体テスト再実行
npm test
npm run test:coverage      # カバレッジ確認

# ステップ 6: 新規テストの追加（必要に応じて）
# ... テストコード追加 ...
npm test -- <新規テストファイル名>

# ステップ 7: E2Eテスト再実行（devサーバーをバックグラウンドで起動）
$devServer = Start-Process pwsh -ArgumentList "-Command", "npm run dev" -PassThru  # Windows
# npm run dev & ; DEV_PID=$!  # Unix/Mac
Start-Sleep -Seconds 3  # Windows
# sleep 3  # Unix/Mac
npm run test:e2e
Stop-Process -Id $devServer.Id  # Windows
# kill $DEV_PID  # Unix/Mac

# ステップ 8: 最終確認
npm run lint               # コード品質チェック
npx tsc --noEmit          # TypeScriptコンパイル確認
npm run dev               # 動作確認

# ステップ 9: コミット前の最終確認
git status
git diff

# ステップ 10: コミット＆プッシュ
git add <変更したファイル>
git commit -m "refactor: App.tsxを分割してカスタムフックを抽出"
git push origin feature/refactoring-app-component

# ステップ 11: GitHubでPR作成
gh pr create --base develop --title "..." --body "..."
```

---

この品質保証手順を遵守することで、リファクタリング後も安定した品質を維持できます。

---

