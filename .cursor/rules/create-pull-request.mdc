---
alwaysApply: true
---

# Pull Requestの作り方

## 自動実行ルール

ユーザーからPR作成を依頼された場合、以下の全ステップを**自動的に実行**すること。

---

## ステップ 1: 前提条件の確認

### 1.1 現在のブランチを確認
```bash
git branch --show-current
```

### 1.2 コミット状態を確認
```bash
git status
```
- 未コミットの変更がある場合は警告し、コミットを促す

### 1.3 プッシュ状態を確認
```bash
git log origin/$(git branch --show-current)..HEAD
```
- プッシュされていないコミットがある場合は、先にプッシュを実行

---

## ステップ 2: マージ先ブランチとの差分確認

### 2.1 マージ先ブランチの決定
- ユーザーから指定がない場合: `develop` ブランチ
- 指定がある場合: その指定に従う

### 2.2 差分の統計を確認
```bash
git diff <マージ先ブランチ> --stat
```

### 2.3 コミットログを確認
```bash
git log <マージ先ブランチ>..HEAD --oneline
```

---

## ステップ 3: PRタイトルの生成

以下の形式に従ってタイトルを自動生成する：

| 変更の種類 | タイトル形式 | 例 |
|-----------|------------|-----|
| **リファクタリング** | `refactor: <変更内容>` | `refactor: App.tsxを分割してカスタムフックを抽出` |
| **新機能** | `feat: <機能名>` | `feat: 採掘速度計算機能を追加` |
| **バグ修正** | `fix: <修正内容>` | `fix: 増産剤計算の誤りを修正` |
| **ドキュメント** | `docs: <ドキュメント名>` | `docs: READMEにインストール手順を追加` |
| **テスト** | `test: <テスト内容>` | `test: calculator.tsのテストカバレッジを向上` |
| **スタイル** | `style: <変更内容>` | `style: ESLintエラーを修正` |
| **パフォーマンス** | `perf: <改善内容>` | `perf: メモ化により再計算を最適化` |

**生成方法**:
1. `git log` のコミットメッセージから変更の種類を判定
2. 変更されたファイルから主要な変更内容を抽出
3. 簡潔で分かりやすいタイトルを生成（50文字以内を推奨）

---

## ステップ 4: PR本文の生成

### 4.1 品質保証結果の収集
PR本文生成前に、以下の情報を収集する：

1. **単体テスト結果**: テスト実行時の出力を解析
   - `npm test` の終了コード（0=成功、非0=失敗）を確認
   - 出力から "Tests:" または "Test Suites:" 行を抽出してテスト合格数を取得
   - `npm run test:coverage` 実行後、coverage サマリーからカバレッジ率を取得
   - 例: "All files | 92.5 | 90.2 | 95.3 | 92.5 |" から 92.5% を抽出

2. **E2Eテスト結果**: テスト実行時の出力を解析
   - `npm run test:e2e` の終了コード（0=成功、非0=失敗）を確認
   - 出力から "passed" または "failed" を含む行を抽出
   - 例: "21 passed (13s)" から成功数を取得

3. **ビルド結果**: コマンド実行の終了コードから判定
   - `npm run build` の終了コード
   - 成功: exit code 0 → "✅ success"
   - 失敗: exit code 非0 → "❌ failed"

4. **ESLint結果**: `npm run lint` の出力を解析
   - 出力から "error" と "warning" の数をカウント
   - 例: "0 errors, 2 warnings" から抽出

### 4.2 テンプレート構造
以下のテンプレートに従って、具体的な内容を自動生成する：
```markdown
<1-2行で変更内容を要約>

## 目的

<なぜこの変更が必要か、解決する課題を記載>

## 変更内容

<変更したファイルと内容を箇条書きで記載>
- ファイル名: 変更内容

## 品質保証結果

### 単体テスト
- 実行結果: <passed/failed>
- カバレッジ: <カバレッジ率>

### E2Eテスト
- 実行結果: <passed/failed>
- シナリオ数: <成功数/総数>

### ビルド
- ビルド結果: <success/failed>

### ESLint
- エラー: <エラー数>
- 警告: <警告数>

## 参考

<関連するIssue、ドキュメント、参考URLなどがあれば記載>
```

### 本文生成の具体例（リファクタリングの場合）

```markdown
App.tsxを複数のレイアウトコンポーネントに分割し、カスタムフックを抽出してコードの保守性を向上

## 目的

App.tsxが1000行を超え、保守性が低下していたため、責任を分離し、テスタビリティを向上させる。

## 変更内容

- `src/App.tsx`: メインロジックを300行に削減
- `src/components/Layout/MainLayout.tsx`: レイアウトコンポーネントを抽出
- `src/hooks/useProductionCalculation.ts`: 計算ロジックをカスタムフックに抽出
- `src/components/__tests__/Main.smoke.test.tsx`: スモークテストを追加

## 品質保証結果

### 単体テスト
- 実行結果: ✅ passed (0 failed)
- カバレッジ: 92.5%

### E2Eテスト
- 実行結果: ✅ passed
- シナリオ数: 21/21

### ビルド
- ビルド結果: ✅ success

### ESLint
- エラー: 0
- 警告: 0

## 参考

- リファクタリングガイド: @refactoring.mdc
```

---

## ステップ 5: PR作成コマンドの実行

### 5.1 本文をファイルに保存
複数行の本文を扱うため、一時ファイルに保存：

**Windows (PowerShell)**:
```powershell
# 本文を一時ファイルに保存
$prBody = @"
<生成したPR本文>
"@
$prBody | Out-File -FilePath "$env:TEMP\pr_body.md" -Encoding utf8
```

**Unix/Mac (Bash)**:
```bash
# 本文を一時ファイルに保存
cat > /tmp/pr_body.md << 'EOF'
<生成したPR本文>
EOF
```

### 5.2 PRを作成

**Windows**:
```powershell
gh pr create --base <マージ先ブランチ> --title "<生成したタイトル>" --body-file "$env:TEMP\pr_body.md"
```

**Unix/Mac**:
```bash
gh pr create --base <マージ先ブランチ> --title "<生成したタイトル>" --body-file /tmp/pr_body.md
```

### 5.3 一時ファイルを削除

**Windows**:
```powershell
Remove-Item "$env:TEMP\pr_body.md"
```

**Unix/Mac**:
```bash
rm /tmp/pr_body.md
```

### 5.4 結果を確認
- PR URLが表示されることを確認
- ブラウザで自動的に開かれることを確認

---

## エラーハンドリング

### `gh` コマンドが見つからない場合
```
エラー: GitHub CLI (`gh`) がインストールされていません。
以下のコマンドでインストールしてください：
- Windows: `winget install GitHub.cli`
- Mac: `brew install gh`
- Linux: https://github.com/cli/cli#installation
```

### 認証エラーの場合
```
エラー: GitHub CLIで認証されていません。
以下のコマンドで認証してください：
`gh auth login`
```

### プッシュされていない場合
```
警告: 変更がリモートにプッシュされていません。
先に以下のコマンドを実行してください：
`git push origin <ブランチ名>`
```

### 未コミットの変更がある場合
```
警告: 未コミットの変更があります。
先にコミットしてください：
`git add .`
`git commit -m "..."`
```

---

## 重要な注意事項

1. **PRタイトルは具体的に**: 変更内容が一目で分かるようにする
2. **本文は詳細に**: レビュアーが文脈を理解できるように十分な情報を提供
3. **テスト結果は必須**: 品質保証セクションは必ず埋める
4. **差分を確認**: PR作成前に必ず差分を確認し、意図しない変更がないかチェック
5. **ユーザーに報告**: 各ステップの実行結果をユーザーに報告する
6. **OS対応**: ユーザーのOS（Windows/Unix/Mac）を検出し、適切なコマンドを使用する

---
